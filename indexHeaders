"""
A simple system to create a dict containing key calls to header cells, and their corresponding ndx

import indexHeaders

To create a flexible pointer system, a simple system of pointers must be created.

# If header "DNSHostname" is in CSV column 7...
NEW_NDX = {}
counter = 0 # indexer
for header in CSVheaders:
    NDX_ALL[header] = counter
    counter += 1
HEAD_NAMES = {"Hostname": "DNSHostname"}
# Create new NEW_NDX entries based on HEAD_NAMES entries, using indexes stored in NDX_ALL
for Key in HEAD_NAMES:
    NEW_NDX[Key] = NDX_ALL[Key]
# ...then NEW_NDX["Hostname"] = 7
"""
from typing import List


def build_ndx_calc(csv_headers: List[str], head_names: dict) -> dict:
    """Builds and returns an Index calc dict based on the provided header row\n
    Provide headers row and head names dictionary"""

    # A dictionary of all header names from given CSV
    # For each column header, ndx_all[header] = header's index
    ndx_all = {}
    index = 0
    for header in csv_headers:
        ndx_all[header] = index
        index += 1

    # Create new NEW_NDX entries based on HEAD_NAMES entries, using indexes stored in ndx_all
    ndx_calc = {}
    for Key, Val in head_names.items():
        try:
            ndx_calc[Key] = ndx_all[Val]
        except (IndexError, KeyError):
            ndx_calc[Key] = None

    # Check for duplicate indexes or non indexed headers
    duplicates = []
    nonindexed = []
    dup_check = {}
    for key, val in ndx_calc.items():
        if val is None:
            nonindexed.append([key, val])
        dup_check.setdefault(val, set()).add(key)
    for Val in dup_check.values():
        if len(Val) > 1:
            for k in Val:
                duplicates.append([k, ndx_calc[k]])

    if duplicates:
        print("Error: Duplcate header indexes!")
        print('\n'.join(str(x) for x in duplicates), '\n')

    if nonindexed:
        print("Error: Non indexed headers!")
        print('\n'.join(str(x) for x in nonindexed), '\n')

    if duplicates or nonindexed:
        print('\n'.join(str([x, y]) for x, y in ndx_calc.items()), '\n')
        exit(1)

    return ndx_calc
